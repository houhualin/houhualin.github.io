<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="2020/10/06/C#%E6%B3%9B%E5%9E%8B%E7%BA%A6%E6%9D%9F/"/>
      <url>2020/10/06/C#%E6%B3%9B%E5%9E%8B%E7%BA%A6%E6%9D%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="C-泛型约束"><a href="#C-泛型约束" class="headerlink" title="C#泛型约束"></a>C#泛型约束</h1><p><strong><br />**泛型约束就是对泛型(传入的类型)进行约束，约束就是指定该类型必须满足某些特定的特征，例如：可以被实例化、实现某个接口，是某个类本身或者其派生类等等。</strong><br /><br><br /><strong>泛型约束的使用：**</strong>where 泛型 : 泛型约束1、泛型约束2**….，<strong>如果有new()约束的话则必须放在最后</strong><br />**<br><a name="AHe6J"></a></p><h1 id="以下是微软官方给出的可能的约束"><a href="#以下是微软官方给出的可能的约束" class="headerlink" title="以下是微软官方给出的可能的约束:"></a>以下是微软官方给出的可能的约束:</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">where</span> T : <span class="keyword">base</span>-<span class="keyword">class</span> <span class="comment">// 基类约束</span></span><br><span class="line"><span class="keyword">where</span> <span class="title">T</span> : <span class="title">interface</span>  <span class="comment">// 接口约束</span></span><br><span class="line"><span class="keyword">where</span> <span class="title">T</span> : <span class="keyword">class</span>      <span class="comment">//引用类型约束</span></span><br><span class="line"><span class="keyword">where</span> <span class="title">T</span> : <span class="title">struct</span>     <span class="comment">// 值类型约束(不包括可空类型)</span></span><br><span class="line">where T : new()      // 无参数构造函数约束</span><br><span class="line"><span class="keyword">where</span> U : T          <span class="comment">// 裸类型约束</span></span><br></pre></td></tr></table></figure><p><a name="csl9J"></a></p><h1 id="1-无参数构造函数约束"><a href="#1-无参数构造函数约束" class="headerlink" title="1.无参数构造函数约束"></a>1.无参数构造函数约束</h1><p>在DemoClass1类中我们想实现一个单例的模板，但是这样写在第7行会报错。错误是未对T类型进行约束，所以无法创造实例。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">DemoClass1</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> T instance;</span><br><span class="line">    DemoClass()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//instance = new T();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br /><br />现在想想为什么需要类型约束。我们的代码中使用了  `instnace = new T()`<br />这里调用了T类的默认构造函数，那如果T类中没有默认构造函数会出现什么情况？错误。<br />所以C#语言中进行了类型约束，用于把这种运行时错误转化为编译时错误。<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class DemoClass2&lt;T&gt; where T : new() &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> T instance;</span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="title">DemoClass</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        instance = <span class="keyword">new</span> T();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><br /><br />现在DemoClass2已经做好了类型约束，假如我让Test类(没有无参构造函数)去继承这个泛型模板，会发生报错。这里采用vs2017的报错。![image.png](https://cdn.nlark.com/yuque/0/2020/png/552893/1600596432452-84a50d57-cf70-4216-b5c1-8e80d805f9d8.png#align=left&display=inline&height=81&margin=%5Bobject%20Object%5D&name=image.png&originHeight=86&originWidth=625&size=26409&status=done&style=none&width=592)<br />当Test持有公共的无参构造时才能继承这个泛型接口<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//class Test : DemoClass2&lt;Test&gt;</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//    Test(string i)</span></span><br><span class="line"><span class="comment">//    &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Test</span> : <span class="title">DemoClass2</span>&lt;<span class="title">Test</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    Test(<span class="keyword">string</span> i)&#123;&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a name="7gvPi"></a># 2.多个泛型条件以及多参数约束<p><br />下面的代码中我们对参数T进行了接口约束，以及基类约束，对参数U进行了默认构造函数的约束。<br />如过我们想使用这个泛型模板必须满足全部的约束条件。<br />如下：Demo1满足基类为Main，并且实现了Interface1接口，Demo2满足拥有公有的默认构造函数(如果只有默认构造函数也可以不写)，Demo3才能在继承时实例化GenericClass模板。<br />注意：并不是说泛型模板只能在继承的时候使用，你也可以直接实例化一个对象。<br />例如：<code>GenericClass&lt;Demo1, Demo2&gt; genericClass = new GenericClass&lt;Demo1, Demo2&gt;();</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Main</span> &#123;&#125; </span><br><span class="line"><span class="keyword">interface</span> <span class="title">Interface1</span> &#123;&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">GenericClass</span>&lt;<span class="title">T</span>,<span class="title">U</span>&gt; <span class="keyword">where</span> <span class="title">T</span> : <span class="title">Main</span>, <span class="title">Interface1</span></span><br><span class="line">where U : new() &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Demo1</span> : <span class="title">Main</span>, <span class="title">Interface1</span> &#123; &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Demo2</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Demo2</span>(<span class="params"></span>)</span> &#123; &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Demo3</span> : <span class="title">GenericClass</span>&lt;<span class="title">Demo1</span>, <span class="title">Demo2</span>&gt;&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="FRWsY"></a></p><h1 id="后记："><a href="#后记：" class="headerlink" title="后记："></a>后记：</h1><p>其他的类型约束不会的话，可以以上面的例子推一下，本文只做个基础学习。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/10/06/hello-world/"/>
      <url>2020/10/06/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h3>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
